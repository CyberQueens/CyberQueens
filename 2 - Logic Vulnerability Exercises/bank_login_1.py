"""
Guy Levin 2019 (c) All Rights Reserved

about:
	This is a (minimal) banking application. User passwords are randomly generated each run

goal: 
	reach the function 'victory' (without changing the code)

hand in:
	- what is the vulnerability
	- describe a fix for the vulnerability

notes:
	you can edit the code to debug, however make sure your solution works on the original code
"""
import sys
if sys.version_info[0] < 3:
    raise Exception("Python 3 or a more recent version is required. Download Python 3 from https://www.python.org/downloads/")

import random

g_users = \
{
	"Bugs Bunny": None,
	"Daffy Duck": None,
}

def get_user_string(message):
	got_input = False 
	while not got_input:
		user_input = input(message + ": ")
		got_input = user_input != ""

	return user_input

def authenticate(input_username, input_password):
	if input_username not in g_users:
		print("ERROR: wrong user name")
		return False

	real_password = g_users[input_username]
	chars_to_check = min(len(real_password), len(input_password))
	
	for i in range(0, chars_to_check):
		if real_password[i] != input_password[i]:
			print("ERROR: wrong password")
			return False
	
	# passed all checks
	return True

def victory():
	print("Congratulations! You hacked the bank!")

def bank_login():
	input_username = get_user_string("enter user name")
	input_password = get_user_string("enter password")

	if authenticate(input_username, input_password):
		victory()
	else:
		print("Incorrect login. Try again.")

def generate_random_password():
	password_length = 50
	password_letters = "abc"
	return "".join([random.choice(password_letters) for x in range(password_length)])

def create_user_passwords():
	"""generate random passwords for each user"""
	for user, password in g_users.items():
		if password == None:
			g_users[user] = generate_random_password()

def welcome():
	print("Welcome to the bank, " + " or ".join(g_users.keys()) + ".")

def main():
	create_user_passwords()
	welcome()
	bank_login()

if __name__ == '__main__':
	main()