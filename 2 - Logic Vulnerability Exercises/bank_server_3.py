"""
Guy Levin 2019 (c) All Rights Reserved

about:
	This is a (minimal) banking application server. It listens to commands on port 127.0.0.1:1338

goal: 
	Find and exploit all the vulnerabilities in this server (without changing the code)

hand in:
	- Describe each vulnerability and how you would fix it
	- Create a function in bank_server_3_client.py to exploit each vulnerability found
	- Create a function in bank_server_3_client.py to steal everyones money

notes:
	- see bank_server_3_client.py and bank_server_3_mini_client.py
	- you can edit the code to debug, however make sure your solution works on the original code
"""
import sys
if sys.version_info[0] < 3:
    raise Exception("Python 3 or a more recent version is required. Download Python 3 from https://www.python.org/downloads/")

import random
import socket
import os
import traceback

DATABASE_FILE = "./bank_database.txt"
TITLES = ("Ms./Mr./Other ", "Ms. ", "Mr. ")

def generate_random_password():
	password_length = 50
	password_letters = [chr(c) for c in range(ord('a'), ord('a')+26)]
	return "".join([random.choice(password_letters) for x in range(password_length)])

class User():
	def __init__(self, name, title, password, money, extra_info):
		self.name = name
		self.title = title
		self.password = password
		self.money = money
		self.extra_info = extra_info

	def save_to_string(self):
		"""get format that we can save to a file"""
		return ";".join(map(str, [ \
			self.name, 
			self.title, 
			self.password, 
			self.money, 
			self.extra_info]))

	def load_from_string(self, information_line):
		user_information = information_line.split(";")
		self.name = user_information[0]
		self.title = int(user_information[1])
		self.password = user_information[2]
		self.money = float(user_information[3])
		self.extra_info = user_information[4]

	def __str__(self):
		return f"name: '{self.name}', title: '" + TITLES[self.title] + f"'," \
				+ f" password: '{self.password}', money: '{self.money}'," \
				+ f" extra_info: '{self.extra_info}'"

	def __repr__(self):
		return self.__str__()

def create_user_from_loadstring(load_string):
	u = User("", 0, "", 0, "")
	u.load_from_string(load_string)
	return u

def save_user_database_to_file(users):
	"""saves all the users to a database file (so we can recover from a power failure)"""
	users_as_strings = "\n".join([user.save_to_string() for user in users])
	open(DATABASE_FILE, "wb").write(users_as_strings.encode('ascii'))

def load_users_from_database_file():
	users_as_strings = open(DATABASE_FILE, "rb").read().decode('ascii').split("\n")
	return [create_user_from_loadstring(user) for user in users_as_strings]

def handle_connection(connection):
	authenticated_user_index = None

	while True:
		users = load_users_from_database_file()

		# read until new line
		data = connection.recv(1)
		if data == b"":
			break

		while data[-1] != 10: # 10 = "\n"
			data += connection.recv(1)

		message = data.decode()
		message = message[:-1] # remove the new line ("\n") char
		print(f"Message: {message}")

		if message.startswith("help"):
			help_message = b"available commands: (commands marked with a '*' can only be done after logged in) \n" \
						b"  help - print this help text\n" \
						b"  new user <username> <password> - create a new user with name <username> and password <password>\n" \
						b"  login <username> <password> - login to user <username> with password <password>\n" \
						b"* logout - logout from current user\n" \
						b"* show money - show funds of current account\n" \
						b"* transfer <to username> <ammount> - transfer <ammount> of money from current user to <to username>\n" \
						b"* list users - list all user names in database\n" \
						b"* query user database [username] [index of information] - query the database for a specific field of a certain user (specified by <index of information>). default current user and default all information\n"
			connection.sendall(help_message)
			continue

		debug = False
		# take care of "dump info" command
		if debug and message.startswith("dump info"):
			to_send = b""
			for user in users:
				to_send += str(user).encode() + b"\n"
			connection.sendall(to_send + b"success.\n")
			continue

		# take care of "new user" command
		if message.startswith("new user"):
			try:
				words = message.split(" ")
				input_username = words[2]
				input_password = words[3]
				new_user = User(input_username, 0, input_password, 0, "")
				users.insert(0, new_user)
			except Exception as e:
				connection.sendall(f"new user error: {e}\n".encode())
				continue

			connection.sendall(b"success.\n")
			save_user_database_to_file(users)
			continue
		
		# take care of "login" command
		if message.startswith("login"):
			try:
				# first let's check we're not already logged in
				if authenticated_user_index is not None:
					raise Exception("Already logged in")
				words = message.split(" ")
				input_username = words[1]
				input_password = words[2]
				for i, user in enumerate(users):
					if user.name == input_username and user.password == input_password:
						authenticated_user_index = i 
						break
				if authenticated_user_index is not None:
					connection.sendall(b"success.\n")
				else:
					connection.sendall(b"error bad username or password\n")
			except Exception as e:
				connection.sendall(f"login error: {e}\n".encode())
				continue

			save_user_database_to_file(users)
			continue

		# take care of "logout" command
		if message.startswith("logout"):
			authenticated_user_index = None
			connection.sendall(b"success.\n")
			continue

		# take care of "show money" command
		if message.startswith("show money"):
			if authenticated_user_index is None:
				connection.sendall(b"show money error: need to login first.\n")
				continue

			connection.sendall(f"user {users[authenticated_user_index].name} has {users[authenticated_user_index].money}$.\n".encode() + b"success.\n")
			continue

		# take care of "transfer" command
		if message.startswith("transfer"):		
			try:
				# first let's check we're not already logged in
				if authenticated_user_index is None:
					raise Exception("Need to first log in")
				words = message.split(" ")
				input_username = words[1]
				input_ammount = float(words[2])

				#check we have the money to transfer
				if input_ammount > users[authenticated_user_index].money:
					raise Exception(f"can't transfer {input_ammount} (only have {users[authenticated_user_index].money})")
				
				#check that the ammount to transfer is positive :P
				if input_ammount < 0:
					raise Exception(f"nice try but can only transfer positive values ;)")

				#check if user exists
				user_to_transfer_to = None
				for user in users:
					if user.name == input_username:
						user_to_transfer_to = user
						break
				if user_to_transfer_to is None:
					raise Exception(f"didn't find user '{input_username}'")

				#if we got here, we passed all our checks and need to execute transfer				
				user_to_transfer_to.money += input_ammount
				users[authenticated_user_index].money -= input_ammount

			except Exception as e:
				connection.sendall(f"transfer error: {e}\n".encode())
				continue

			save_user_database_to_file(users)
			connection.sendall(b"success.\n")
			continue
			
		# take care of "list users" command
		if message.startswith("list users"):

			if authenticated_user_index is None:
				connection.sendall(f"list users error: need to login first\n".encode())
				continue

			curret_users = ", ".join([user.name for user in users])
			connection.sendall(b"current users: " + curret_users.encode() + b"\n" + b"success.\n")
			continue

		# take care of "query user database" command
		if message.startswith("query user database"):
			try:
				if authenticated_user_index is None:
					raise Exception("need to login first.")

				words = message.split(" ")
				user_index_to_query = None
				input_field = None
				if len(words) == 3:
					# no arguments means print all info for current user
					user_index_to_query = authenticated_user_index
				elif len(words) >= 4:
					# has username
					input_username = words[3]
					for i, user in enumerate(users):
						if user.name == input_username:
							user_index_to_query = i
							break
					if user_index_to_query is None:
						raise Exception(f"didn't find user '{input_username}'")
				if len(words) == 5:
					# has specific field
					input_field = int(words[4])
					if input_field > 1:
						raise Exception("can only view name and title information (index 0 or 1)")
				user_info_list = users[user_index_to_query].save_to_string().split(";")

				if input_field is not None:
					user_info = str(user_info_list[input_field])
				else:
					user_info = str(user_info_list[0]) +" "+ str(user_info_list[1])
				connection.sendall(f"userinfo: {user_info}\nsuccess\n".encode())
				
			except Exception as e:
				connection.sendall(f"query user database error: {e}\n".encode())
				continue
			continue

		connection.sendall(f"unknown command: '{message}'\n".encode())
		continue

def serve():
	print("starting")
	try:
		s = socket.socket()
		s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
		s.bind(("127.0.0.1", 1338))
		s.listen(5)

		while True:
			connection, addr = s.accept()
			try:
				print(f"received connection from {addr}")
				handle_connection(connection)
			except Exception as e:
				print("handle_connection error: ", e)
				traceback.print_exc()

			connection.close()

	except Exception as e:
		print("serve error: ", e)
	except KeyboardInterrupt as e:
		print("closing")
		s.close()
		return

	s.close()

def main():

	print("To reset the user database:\n\t1. close the server\n\t2. delete the database file ('bank_database.txt')\n\t3. start the server again\n")

	if not os.path.isfile(DATABASE_FILE): # if no initial database, create it	
		oprah = User("Oprah", 2, generate_random_password(), 5_000_000, "entrepreneur")
		tesla = User("Tesla", 1, generate_random_password(), 30, "scientist")
		marie = User("Marie", 2, generate_random_password(), 10_000, "scientist")
		save_user_database_to_file([oprah, tesla, marie])

	serve()

if __name__ == '__main__':
	main()
